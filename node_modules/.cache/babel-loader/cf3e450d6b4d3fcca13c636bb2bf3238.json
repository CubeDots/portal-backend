{"ast":null,"code":"var _jsxFileName = \"/var/www/html/cuengine-portal-backend/src/pages/dash/InvitationsDashPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useAuthHeader } from 'react-auth-kit';\nimport { API_ENDPOINT } from \"../../common/Constants\";\nimport DataTable from 'react-data-table-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction InvitationsDashPage() {\n  _s();\n\n  const authHeader = useAuthHeader(); // const [invitationsLoader, setInvitationsLoader] = useState(false);\n  // const [invitations, setInvitations] = useState([]);\n  // const [pageno, setPage] = useState(1);\n  // const countPerPage = 3;\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [totalRows, setTotalRows] = useState(0);\n  const [perPage, setPerPage] = useState(10);\n  useEffect(() => {\n    //fetchInvitationData();\n    fetchUsers(1);\n  }, []);\n  let postData = {\n    test: null,\n    start_date: '2022-02-01T00:00:00.000Z',\n    end_date: '2022-02-28T00:00:00.000Z'\n  }; // async function fetchInvitationData() {\n  //   setInvitationsLoader(true);\n  //   try {\n  //     const res = await axios.post(API_ENDPOINT + \"orgzit/payplans\", postData, { headers: { Authorization: authHeader() } });\n  //     setInvitationsLoader(false);\n  //     setInvitations(res.data.data);\n  //   } catch (error) {\n  //     console.error(\"error \", error);\n  //     setInvitationsLoader(false);\n  //   }5\n\n  const fetchUsers = async page => {\n    setLoading(true);\n    const response = await axios.post(`${API_ENDPOINT}orgzit/payplans?page=${page}&per_page=${perPage}&delay=1`, postData, {\n      headers: {\n        Authorization: authHeader()\n      }\n    });\n    setData(response.data.data);\n    setTotalRows(response.data.total);\n    setLoading(false);\n  };\n\n  const handlePageChange = page => {\n    fetchUsers(page);\n  };\n\n  const handlePerRowsChange = async (newPerPage, page) => {\n    setLoading(true);\n    const response = await axios.post(`${API_ENDPOINT}orgzit/payplans?page=${page}&per_page=${newPerPage}&delay=1`, postData, {\n      headers: {\n        Authorization: authHeader()\n      }\n    });\n    setData(response.data.data);\n    setPerPage(newPerPage);\n    setLoading(false);\n  };\n\n  const columns = [{\n    name: \"ID\",\n    sortable: true,\n    selector: row => row.id\n  }, {\n    name: \"SalesPerson\",\n    sortable: true,\n    selector: row => row.SalesPerson\n  }, {\n    name: \"ProjectName\",\n    sortable: true,\n    selector: row => row.ProjectName\n  }, {\n    name: \"PaymentType\",\n    sortable: true,\n    selector: row => row.PaymentType\n  }, {\n    name: \"PaymentStatus\",\n    sortable: true,\n    selector: row => row.PaymentStatus\n  }, {\n    name: \"PaymentCurrency\",\n    sortable: true,\n    selector: row => row.PaymentCurrency\n  }, {\n    name: \"ExpectedPaymentDate\",\n    sortable: true,\n    selector: row => row.ExpectedPaymentDate\n  }, {\n    name: \"ExpectedPaymentAmount\",\n    sortable: true,\n    selector: row => row.ExpectedPaymentAmount\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DataTable, {\n      title: \"Appointments\",\n      columns: columns,\n      data: data.filter(item => {\n        if (searchTerm === \"\") {\n          return item;\n        } else if (item.id && item.id.includes(searchTerm)) {\n          return item;\n        } else {\n          return item;\n        }\n      }),\n      progressPending: loading,\n      pagination: true,\n      paginationServer: true,\n      paginationTotalRows: totalRows,\n      onChangeRowsPerPage: handlePerRowsChange,\n      onChangePage: handlePageChange,\n      paginationPerPage: 10,\n      paginationComponentOptions: {\n        noRowsPerPage: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(InvitationsDashPage, \"p/WLpVbWnVo9gtA9C92fC+Pgl1k=\", false, function () {\n  return [useAuthHeader];\n});\n\n_c = InvitationsDashPage;\nexport default InvitationsDashPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"InvitationsDashPage\");","map":{"version":3,"sources":["/var/www/html/cuengine-portal-backend/src/pages/dash/InvitationsDashPage.js"],"names":["React","useEffect","useState","axios","useAuthHeader","API_ENDPOINT","DataTable","InvitationsDashPage","authHeader","searchTerm","setSearchTerm","data","setData","loading","setLoading","totalRows","setTotalRows","perPage","setPerPage","fetchUsers","postData","test","start_date","end_date","page","response","post","headers","Authorization","total","handlePageChange","handlePerRowsChange","newPerPage","columns","name","sortable","selector","row","id","SalesPerson","ProjectName","PaymentType","PaymentStatus","PaymentCurrency","ExpectedPaymentDate","ExpectedPaymentAmount","filter","item","includes","noRowsPerPage"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useAuthHeader } from 'react-auth-kit';\nimport { API_ENDPOINT } from \"../../common/Constants\";\nimport DataTable from 'react-data-table-component';\n\n\nfunction InvitationsDashPage() {\n\n  const authHeader = useAuthHeader();\n  // const [invitationsLoader, setInvitationsLoader] = useState(false);\n  // const [invitations, setInvitations] = useState([]);\n  // const [pageno, setPage] = useState(1);\n  // const countPerPage = 3;\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [totalRows, setTotalRows] = useState(0);\n  const [perPage, setPerPage] = useState(10);\n\n\n  useEffect(() => {\n    //fetchInvitationData();\n    fetchUsers(1);\n  }, []);\n\n  let postData = {\n    test: null,\n    start_date: '2022-02-01T00:00:00.000Z',\n    end_date: '2022-02-28T00:00:00.000Z'\n  };\n  // async function fetchInvitationData() {\n  //   setInvitationsLoader(true);\n\n\n  //   try {\n  //     const res = await axios.post(API_ENDPOINT + \"orgzit/payplans\", postData, { headers: { Authorization: authHeader() } });\n  //     setInvitationsLoader(false);\n  //     setInvitations(res.data.data);\n\n  //   } catch (error) {\n  //     console.error(\"error \", error);\n  //     setInvitationsLoader(false);\n  //   }5\n  const fetchUsers = async page => {\n    setLoading(true);\n\n    const response = await axios.post(`${API_ENDPOINT}orgzit/payplans?page=${page}&per_page=${perPage}&delay=1`, postData, { headers: { Authorization: authHeader() } });\n\n    setData(response.data.data);\n    setTotalRows(response.data.total);\n    setLoading(false);\n  };\n\n  const handlePageChange = page => {\n    fetchUsers(page);\n  };\n\n  const handlePerRowsChange = async (newPerPage, page) => {\n    setLoading(true);\n    const response = await axios.post(`${API_ENDPOINT}orgzit/payplans?page=${page}&per_page=${newPerPage}&delay=1`, postData, { headers: { Authorization: authHeader() } });\n    setData(response.data.data);\n    setPerPage(newPerPage);\n    setLoading(false);\n  };\n\n  const columns = [\n    { name: \"ID\", sortable: true, selector: row => row.id },\n    { name: \"SalesPerson\", sortable: true, selector: row => row.SalesPerson },\n    { name: \"ProjectName\", sortable: true, selector: row => row.ProjectName },\n    { name: \"PaymentType\", sortable: true, selector: row => row.PaymentType },\n    { name: \"PaymentStatus\", sortable: true, selector: row => row.PaymentStatus },\n    { name: \"PaymentCurrency\", sortable: true, selector: row => row.PaymentCurrency },\n    { name: \"ExpectedPaymentDate\", sortable: true, selector: row => row.ExpectedPaymentDate },\n    { name: \"ExpectedPaymentAmount\", sortable: true, selector: row => row.ExpectedPaymentAmount },\n  ];\n\n  return (\n    <>\n      {/* <div>\n        <div className=\"col mobileInputSection\">\n          <label className=\"form-label\">Mobile</label>\n          <div className=\"input-group\">\n            <span className=\"input-group-text\" id=\"basic-addon1\">Search</span>\n            <input type=\"text\" className=\"form-control \" placeholder=\"Search\" name=\"search\" defaultValue={searchTerm} onChange={(e) => setSearchTerm(  e.target.value)} />\n          </div>\n        </div>\n      </div> */}\n      <DataTable\n        title=\"Appointments\"\n        columns={columns}\n        data={data.filter((item) => {\n          if (searchTerm === \"\") {\n            return item;\n          } else if (\n            item.id && item.id.includes(searchTerm)\n          ) {\n            return item;\n          } else {\n            return item;\n          }\n        })}\n        progressPending={loading}\n        pagination\n        paginationServer\n        paginationTotalRows={totalRows}\n        onChangeRowsPerPage={handlePerRowsChange}\n        onChangePage={handlePageChange}\n        paginationPerPage={10}\n        paginationComponentOptions={{\n          noRowsPerPage: true\n        }}\n      />\n\n\n    </>\n  );\n}\n\nexport default InvitationsDashPage;"]},"metadata":{},"sourceType":"module"}