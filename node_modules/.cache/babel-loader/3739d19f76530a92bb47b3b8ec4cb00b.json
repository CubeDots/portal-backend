{"ast":null,"code":"var _jsxFileName = \"/var/www/html/cuengine-portal/src/components/cuverse/FolderChooser.js\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { injectIntl } from \"react-intl\";\nimport axios from \"axios\"; //import { API_ENDPOINT } from \"../common/Constants\";\n\nimport { API_ENDPOINT } from \"../../common/Constants\";\nimport Filter from \"./Filter\";\nimport styles from \"./styles\";\nimport data from \"./data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(data);\n\nclass FolderChooser extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleSearch = toggle => {\n      // search.find(\"span\").hide();\n      this.setState({\n        isSearching: toggle\n      });\n    };\n\n    this.handleSearch = (event, value) => {\n      value = value.trim();\n      this.setState({\n        searchVal: value\n      });\n      if (value.length === 0) this.toggleSearch(false);\n    };\n\n    this.handleKeyUp = event => {\n      console.log(\"keyup....\");\n\n      if (event.keyCode === 27) {\n        // search.trigger(\"focusout\");\n        this.Filter.focusout();\n      }\n    };\n\n    this.handleFocusOut = event => {\n      console.log(\"focus out\");\n      if (!this.state.searchVal.length) this.setState({\n        isSearching: false\n      });\n    };\n\n    this.handleClickFolders = nextDir => event => {\n      event.preventDefault();\n      console.log(\"handleClickFolders =\", nextDir);\n      var breadcrumbsUrls = this.state.breadcrumbsUrls;\n\n      if (this.state.isSearching) {\n        // Building the breadcrumbs\n        breadcrumbsUrls = this.generateBreadcrumbs(nextDir);\n        this.toggleSearch(false);\n      } else {\n        breadcrumbsUrls.push(nextDir);\n      }\n\n      console.log(\"update breadcrumbsUrls =\", breadcrumbsUrls);\n      this.setState({\n        currentPath: nextDir,\n        breadcrumbsUrls: breadcrumbsUrls\n      });\n    };\n\n    this.handleSelectFolders = nextDir => event => {\n      event.preventDefault();\n      this.setState({\n        selected: nextDir\n      });\n    };\n\n    this.handleBreadcrumbsClick = index => event => {\n      var breadcrumbsUrls = this.state.breadcrumbsUrls;\n      var url = breadcrumbsUrls[index];\n      breadcrumbsUrls = this.generateBreadcrumbs(url);\n      this.setState({\n        breadcrumbsUrls: breadcrumbsUrls,\n        currentPath: url\n      });\n    };\n\n    this.generateBreadcrumbs = nextDir => {\n      var path = nextDir.split(\"/\").slice(0);\n\n      for (var i = 1; i < path.length; i++) {\n        path[i] = path[i - 1] + \"/\" + path[i];\n      }\n\n      return path;\n    };\n\n    this.searchByPath = dir => {\n      var path = dir.split(\"/\"),\n          demo = [this.state.data],\n          flag = 0;\n\n      for (var i = 0; i < path.length; i++) {\n        for (var j = 0; j < demo.length; j++) {\n          if (demo[j].name === path[i]) {\n            flag = 1;\n            demo = demo[j].items;\n            break;\n          }\n        }\n      }\n\n      demo = flag ? demo : [];\n      return demo;\n    };\n\n    this.searchData = (data, searchTerms) => {\n      var folders = [];\n      var files = [];\n      var self = this;\n      data.forEach(function (d) {\n        if (d.type === \"folder\") {\n          self.searchData(d.items, searchTerms);\n\n          if (d.name.toLowerCase().match(searchTerms)) {\n            folders.push(d);\n          }\n        } else if (d.type === \"file\") {\n          if (d.name.toLowerCase().match(searchTerms)) {\n            files.push(d);\n          }\n        }\n      });\n      return {\n        folders: folders,\n        files: files\n      };\n    };\n\n    this.escapeHTML = text => {\n      return text.replace(/\\&/g, \"&amp;\").replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");\n    };\n\n    this.bytesToSize = bytes => {\n      var sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n      if (bytes == 0) return \"0 Bytes\";\n      var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n      return Math.round(bytes / Math.pow(1024, i), 2) + \" \" + sizes[i];\n    };\n\n    this.getFilteredData = () => {\n      if (this.state.isSearching) {\n        console.log(\"Search Data \");\n        return this.searchData([data], this.state.searchVal);\n      } else {\n        return this.searchByPath(this.state.currentPath);\n      }\n    };\n\n    this.state = {\n      folderOnly: false,\n      isSearch: false,\n      isSearching: false,\n      searchVal: \"\",\n      currentPath: data.path,\n      breadcrumbsUrls: this.generateBreadcrumbs(data.path),\n      folders: [],\n      files: [],\n      messageIdtt: \"ddddddd\",\n      data: {}\n    }; // this.data = data;\n  }\n\n  componentDidMount() {\n    const {\n      projectID\n    } = this.props;\n    console.log(\"projectID\", projectID);\n    axios.get(API_ENDPOINT + 'cuverse/mediaFiles/' + projectID).then(response => {\n      console.log(\"response.data.data\", response.data.data);\n      this.setState({\n        data: response.data.data\n      }, () => {//console.log(\"apiDataset\", this.state.apiData)\n      });\n    }).catch(error => {\n      console.log(\"error\", error);\n    });\n  }\n\n  componentWillUnmount() {}\n\n  render() {\n    if (!this.state.data) {\n      return \"Loading...\";\n    }\n\n    const {\n      classes,\n      intl\n    } = this.props;\n    var filteredData = this.getFilteredData();\n    var scannedFolders = [];\n    var scannedFiles = [];\n    const test = 1000;\n\n    if (Array.isArray(filteredData)) {\n      filteredData.forEach(function (d) {\n        if (d.type === \"folder\") {\n          scannedFolders.push(d);\n        } else if (d.type === \"file\") {\n          scannedFiles.push(d);\n        }\n      });\n    } else if (typeof filteredData === \"object\") {\n      scannedFolders = filteredData.folders;\n      scannedFiles = filteredData.files;\n    }\n\n    const getFileDownload = row => {\n      console.log(\"row.mime_type \", row.mime_type, row.path);\n      let fileURL = row.path;\n      let fileName = row.name;\n      fetch(fileURL).then(resp => resp.blob()).then(blob => {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = url; // the filename you want\n\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url); // alert('your file has downloaded!'); // or you know, something with better UX...\n      }).catch(() => alert('oh no!')); // var anchor = document.createElement('a');\n      // anchor.href = row.path;\n      // anchor.target = '_blank';\n      // anchor.download = row.name;\n      // anchor.click();\n      // document.body.removeChild(anchor);\n      // function forceDownload(href) {\n      // var anchor = document.createElement('a');\n      // anchor.href = row.path;\n      // anchor.download = row.name;\n      // document.body.appendChild(anchor);\n      // anchor.click();\n      // document.body.removeChild(anchor);\n      //}\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: clsx(classes.filemanager, this.state.isSearching && \"searching\"),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.breadcrumbs,\n          children: this.state.isSearching ? /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Search results: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }, this) : this.state.breadcrumbsUrls.map((u, idx) => {\n            var name = u.split(\"/\");\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"inline-block\"\n              },\n              children: [idx !== this.state.breadcrumbsUrls.length - 1 && /*#__PURE__*/_jsxDEV(\"a\", {\n                onClick: this.handleBreadcrumbsClick(idx),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"folderName\",\n                  children: name[name.length - 1]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 289,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 45\n              }, this), idx !== this.state.breadcrumbsUrls.length - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"arrow\",\n                children: \"\\u2192\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 45\n              }, this), idx === this.state.breadcrumbsUrls.length - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"folderName\",\n                children: name[name.length - 1]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 45\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: clsx(classes.data, !this.state.isSearching && \"animated\"),\n          children: [scannedFolders.map((f, idx) => {\n            var itemsLength = f.items.length,\n                name = this.escapeHTML(f.name);\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"folders\",\n              onClick: this.handleSelectFolders(f.path),\n              onDoubleClick: this.handleClickFolders(f.path),\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                title: f.path,\n                className: \"folders\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: clsx(classes.icon, classes.folder, itemsLength && \"full\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 41\n                }, this), f.path === this.state.selected && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: clsx(classes.icon, classes.selected)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"details\",\n                  children: itemsLength + (itemsLength === 1 ? \" item\" : itemsLength > 1 ? \" items\" : \" Empty\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 37\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 33\n            }, this);\n          }), scannedFiles.map((f, idx) => {\n            var fileSize = this.bytesToSize(f.size);\n            var name = this.escapeHTML(f.name);\n            var fileType = name.split(\".\");\n            fileType = fileType[fileType.length - 1];\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: clsx(\"files\", this.state.folderOnly && \"unselectable\"),\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                className: \"files\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: clsx(classes.icon, classes.file, \"f-\" + fileType),\n                  children: fileType\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"details\",\n                  children: [fileSize, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"download\",\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-sm btn-primary align-items-center mb-3\",\n                    onClick: () => getFileDownload(f),\n                    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                      xmlns: \"http://www.w3.org/2000/svg\",\n                      width: \"16\",\n                      height: \"16\",\n                      fill: \"currentColor\",\n                      className: \"bi bi-download\",\n                      viewBox: \"0 0 16 16\",\n                      children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                        d: \"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 376,\n                        columnNumber: 45\n                      }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                        d: \"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 377,\n                        columnNumber: 45\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 375,\n                      columnNumber: 171\n                    }, this), \" Download\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 69\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 37\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 33\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this), !scannedFolders.length && !scannedFiles.length && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.nothingfound,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nofiles\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"No files here.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nFolderChooser.propTypes = {\n  classes: PropTypes.object.isRequired,\n  intl: PropTypes.object.isRequired\n};\nexport default injectIntl(withStyles(styles)(FolderChooser));","map":{"version":3,"sources":["/var/www/html/cuengine-portal/src/components/cuverse/FolderChooser.js"],"names":["React","withStyles","PropTypes","clsx","injectIntl","axios","API_ENDPOINT","Filter","styles","data","console","log","FolderChooser","Component","constructor","props","toggleSearch","toggle","setState","isSearching","handleSearch","event","value","trim","searchVal","length","handleKeyUp","keyCode","focusout","handleFocusOut","state","handleClickFolders","nextDir","preventDefault","breadcrumbsUrls","generateBreadcrumbs","push","currentPath","handleSelectFolders","selected","handleBreadcrumbsClick","index","url","path","split","slice","i","searchByPath","dir","demo","flag","j","name","items","searchData","searchTerms","folders","files","self","forEach","d","type","toLowerCase","match","escapeHTML","text","replace","bytesToSize","bytes","sizes","parseInt","Math","floor","round","pow","getFilteredData","folderOnly","isSearch","messageIdtt","componentDidMount","projectID","get","then","response","catch","error","componentWillUnmount","render","classes","intl","filteredData","scannedFolders","scannedFiles","test","Array","isArray","getFileDownload","row","mime_type","fileURL","fileName","fetch","resp","blob","window","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","click","revokeObjectURL","alert","root","filemanager","breadcrumbs","map","u","idx","f","itemsLength","icon","folder","fileSize","size","fileType","file","nothingfound","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { injectIntl } from \"react-intl\";\nimport axios from \"axios\";\n\n//import { API_ENDPOINT } from \"../common/Constants\";\nimport { API_ENDPOINT } from \"../../common/Constants\";\nimport Filter from \"./Filter\";\nimport styles from \"./styles\";\nimport data from \"./data.json\";\n\nconsole.log(data);\n\nclass FolderChooser extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            folderOnly: false,\n            isSearch: false,\n            isSearching: false,\n            searchVal: \"\",\n            currentPath: data.path,\n            breadcrumbsUrls: this.generateBreadcrumbs(data.path),\n            folders: [],\n            files: [],\n            messageIdtt: \"ddddddd\",\n            data: {}\n        };\n\n        // this.data = data;\n    }\n\n    componentDidMount() {\n        const {projectID} = this.props;\n        console.log(\"projectID\",projectID);\n        axios.get(API_ENDPOINT + 'cuverse/mediaFiles/'+projectID).then((response) => {\n            console.log(\"response.data.data\", response.data.data);\n            this.setState({\n                data: response.data.data\n            }, () => {\n                //console.log(\"apiDataset\", this.state.apiData)\n            })\n\n        }).catch((error) => {\n            console.log(\"error\", error);\n        })\n\n    }\n    componentWillUnmount() { }\n\n    toggleSearch = toggle => {\n        // search.find(\"span\").hide();\n        this.setState({ isSearching: toggle });\n    };\n    handleSearch = (event, value) => {\n        value = value.trim();\n        this.setState({ searchVal: value });\n        if (value.length === 0) this.toggleSearch(false);\n    };\n    handleKeyUp = event => {\n        console.log(\"keyup....\");\n        if (event.keyCode === 27) {\n            // search.trigger(\"focusout\");\n            this.Filter.focusout();\n        }\n    };\n    handleFocusOut = event => {\n        console.log(\"focus out\");\n        if (!this.state.searchVal.length) this.setState({ isSearching: false });\n    };\n    handleClickFolders = nextDir => event => {\n        event.preventDefault();\n        console.log(\"handleClickFolders =\", nextDir);\n\n        var breadcrumbsUrls = this.state.breadcrumbsUrls;\n\n        if (this.state.isSearching) {\n            // Building the breadcrumbs\n            breadcrumbsUrls = this.generateBreadcrumbs(nextDir);\n            this.toggleSearch(false);\n        } else {\n            breadcrumbsUrls.push(nextDir);\n        }\n        console.log(\"update breadcrumbsUrls =\", breadcrumbsUrls);\n        this.setState({ currentPath: nextDir, breadcrumbsUrls: breadcrumbsUrls });\n    };\n\n    handleSelectFolders = nextDir => event => {\n        event.preventDefault();\n        this.setState({ selected: nextDir });\n    };\n    handleBreadcrumbsClick = index => event => {\n        var breadcrumbsUrls = this.state.breadcrumbsUrls;\n        var url = breadcrumbsUrls[index];\n\n        breadcrumbsUrls = this.generateBreadcrumbs(url);\n        this.setState({ breadcrumbsUrls: breadcrumbsUrls, currentPath: url });\n    };\n\n    // Splits a file path and turns it into clickable breadcrumbs\n    generateBreadcrumbs = nextDir => {\n        var path = nextDir.split(\"/\").slice(0);\n        for (var i = 1; i < path.length; i++) {\n            path[i] = path[i - 1] + \"/\" + path[i];\n        }\n        return path;\n    };\n\n    // Locates a file by path\n    searchByPath = dir => {\n        var path = dir.split(\"/\"),\n            demo = [this.state.data],\n            flag = 0;\n\n        for (var i = 0; i < path.length; i++) {\n            for (var j = 0; j < demo.length; j++) {\n                if (demo[j].name === path[i]) {\n                    flag = 1;\n                    demo = demo[j].items;\n                    break;\n                }\n            }\n        }\n\n        demo = flag ? demo : [];\n        return demo;\n    };\n\n    // Recursively search through the file tree\n    searchData = (data, searchTerms) => {\n        var folders = [];\n        var files = [];\n        var self = this;\n        data.forEach(function (d) {\n            if (d.type === \"folder\") {\n                self.searchData(d.items, searchTerms);\n\n                if (d.name.toLowerCase().match(searchTerms)) {\n                    folders.push(d);\n                }\n            } else if (d.type === \"file\") {\n                if (d.name.toLowerCase().match(searchTerms)) {\n                    files.push(d);\n                }\n            }\n        });\n\n        return { folders: folders, files: files };\n    };\n\n    // This function escapes special html characters in names\n    escapeHTML = text => {\n        return text\n            .replace(/\\&/g, \"&amp;\")\n            .replace(/\\</g, \"&lt;\")\n            .replace(/\\>/g, \"&gt;\");\n    };\n\n    // Convert file sizes from bytes to human readable units\n    bytesToSize = bytes => {\n        var sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\n        if (bytes == 0) return \"0 Bytes\";\n        var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n        return Math.round(bytes / Math.pow(1024, i), 2) + \" \" + sizes[i];\n    };\n\n    getFilteredData = () => {\n        if (this.state.isSearching) {\n            console.log(\"Search Data \");\n            return this.searchData([data], this.state.searchVal);\n        } else {\n            return this.searchByPath(this.state.currentPath);\n        }\n    };\n\n\n\n    render() {\n        if (!this.state.data) {\n            return \"Loading...\";\n        }\n        const { classes, intl } = this.props;\n\n        var filteredData = this.getFilteredData();\n        var scannedFolders = [];\n        var scannedFiles = [];\n        const test = 1000;\n\n        if (Array.isArray(filteredData)) {\n            filteredData.forEach(function (d) {\n                if (d.type === \"folder\") {\n                    scannedFolders.push(d);\n                } else if (d.type === \"file\") {\n                    scannedFiles.push(d);\n                }\n            });\n        } else if (typeof filteredData === \"object\") {\n            scannedFolders = filteredData.folders;\n            scannedFiles = filteredData.files;\n        }\n\n        const getFileDownload = (row) => {\n            console.log(\"row.mime_type \", row.mime_type, row.path);\n            let fileURL = row.path;\n            let fileName = row.name;\n\n            fetch(fileURL)\n                .then(resp => resp.blob())\n                .then(blob => {\n                    const url = window.URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.style.display = 'none';\n                    a.href = url;\n                    // the filename you want\n                    a.download = fileName;\n                    document.body.appendChild(a);\n                    a.click();\n                    window.URL.revokeObjectURL(url);\n                    // alert('your file has downloaded!'); // or you know, something with better UX...\n                })\n                .catch(() => alert('oh no!'));\n\n            // var anchor = document.createElement('a');\n            // anchor.href = row.path;\n            // anchor.target = '_blank';\n            // anchor.download = row.name;\n            // anchor.click();\n            // document.body.removeChild(anchor);\n\n            // function forceDownload(href) {\n            // var anchor = document.createElement('a');\n            // anchor.href = row.path;\n            // anchor.download = row.name;\n            // document.body.appendChild(anchor);\n            // anchor.click();\n            // document.body.removeChild(anchor);\n            //}\n\n\n        };\n\n\n        return (\n            <div className={classes.root}>\n                <div\n                    className={clsx(\n                        classes.filemanager,\n                        this.state.isSearching && \"searching\"\n                    )}\n                >\n                    {/* <div\n                        className={classes.search}\n                        onClick={() => {\n                            this.toggleSearch(true);\n                        }}\n                    >\n                        {this.state.isSearching && (\n                            <Filter\n                                updateFilter={this.handleSearch}\n                                onKeyUp={this.handleKeyUp}\n                                onFocusOut={this.handleFocusOut}\n                                value={this.state.searchVal}\n                                placeholder={intl.formatMessage(\n                                    {\n                                        id: \"messageIdtt\",\n                                        defaultMessage: `Hello {name}, you have {unreadCount, number} {unreadCount, plural, one {message}  other {messages} }`\n                                    },\n                                    { name: <b>{\"fvd\"}</b>, test }\n                                )}\n                                ref={input => {\n                                    this.Filter = input;\n                                }}\n                            />\n                        )}\n                    </div> */}\n\n                    <div className={classes.breadcrumbs}>\n                        {this.state.isSearching ? (\n                            <span>Search results: </span>\n                        ) : (\n                            this.state.breadcrumbsUrls.map((u, idx) => {\n                                var name = u.split(\"/\");\n                                return (\n                                    <div style={{ display: \"inline-block\" }} key={idx}>\n                                        {idx !== this.state.breadcrumbsUrls.length - 1 && (\n                                            <a onClick={this.handleBreadcrumbsClick(idx)}>\n                                                <span className=\"folderName\">\n                                                    {name[name.length - 1]}\n                                                </span>\n                                            </a>\n                                        )}\n                                        {idx !== this.state.breadcrumbsUrls.length - 1 && (\n                                            <span className=\"arrow\">→</span>\n                                        )}\n                                        {idx === this.state.breadcrumbsUrls.length - 1 && (\n                                            <span className=\"folderName\">\n                                                {name[name.length - 1]}\n                                            </span>\n                                        )}\n                                    </div>\n                                );\n                            })\n                        )}\n                    </div>\n\n                    <ul\n                        className={clsx(\n                            classes.data,\n                            !this.state.isSearching && \"animated\"\n                        )}\n                    >\n                        {scannedFolders.map((f, idx) => {\n                            var itemsLength = f.items.length,\n                                name = this.escapeHTML(f.name);\n\n                            return (\n                                <li\n                                    className=\"folders\"\n                                    onClick={this.handleSelectFolders(f.path)}\n                                    onDoubleClick={this.handleClickFolders(f.path)}\n                                    key={idx}\n                                >\n                                    <a title={f.path} className=\"folders\">\n                                        <span\n                                            className={clsx(\n                                                classes.icon,\n                                                classes.folder,\n                                                itemsLength && \"full\"\n                                            )}\n                                        />\n                                        {f.path === this.state.selected && (\n                                            <span className={clsx(classes.icon, classes.selected)} />\n                                        )}\n                                        <span className=\"name\">{name}</span>\n                                        <span className=\"details\">\n                                            {itemsLength +\n                                                (itemsLength === 1\n                                                    ? \" item\"\n                                                    : itemsLength > 1\n                                                        ? \" items\"\n                                                        : \" Empty\")}\n                                        </span>\n                                    </a>\n                                </li>\n                            );\n                        })}\n                        {scannedFiles.map((f, idx) => {\n                            var fileSize = this.bytesToSize(f.size);\n                            var name = this.escapeHTML(f.name);\n                            var fileType = name.split(\".\");\n                            fileType = fileType[fileType.length - 1];\n\n                            return (\n                                <li\n                                    className={clsx(\n                                        \"files\",\n                                        this.state.folderOnly && \"unselectable\"\n                                    )}\n                                    key={idx}\n                                >\n                                    <a className=\"files\">\n                                        <span\n                                            className={clsx(\n                                                classes.icon,\n                                                classes.file,\n                                                \"f-\" + fileType\n                                            )}\n                                        >\n                                            {fileType}\n                                        </span>\n                                        <span className=\"name\">{name}</span>\n                                        <span className=\"details\">{fileSize} </span>\n                                        <span className=\"download\"> <button className=\"btn btn-sm btn-primary align-items-center mb-3\" onClick={() => getFileDownload(f)}><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-download\" viewBox=\"0 0 16 16\">\n                                            <path d=\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\" />\n                                            <path d=\"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z\" />\n                                        </svg> Download</button></span>\n\n                                       \n                                    </a>\n                                </li>\n                            );\n                        })}\n                    </ul>\n\n                    {!scannedFolders.length && !scannedFiles.length && (\n                        <div className={classes.nothingfound}>\n                            <div className=\"nofiles\" />\n                            <span>No files here.</span>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nFolderChooser.propTypes = {\n    classes: PropTypes.object.isRequired,\n    intl: PropTypes.object.isRequired\n};\n\nexport default injectIntl(withStyles(styles)(FolderChooser));\n"]},"metadata":{},"sourceType":"module"}